This document will lay out the process for getting Simmons University's instances, holdings and items into FOLIO.

1. Convert MARC records

  All records must be in utf8 format to load properly into FOLIO-- yaz-marcdump will do the trick.  Here is a one-liner
  that will accomplish our conversion:

  $ yaz-marcdump -f marc8 -t utf8 -l 9=97 -o marc SimmonsBibRecords.mrc > SimConv.mrc

  What's happening above?
  -f = from "marc8"
  -t = to "utf8"
  -l = leader byte 9 is set to ascii char 97 ("a").  This indicates that we're dealing with a utf8 record
  -o = output is "marc" binary.  By default it will be outputted as MARC text.
  SimmonsBibRecords.mrc is the input file.
  > = direct output SimConv.mrc

2. Create instance records

  There are two ways to do this: convert records locally and use the various APIs to load json records
  into FOLIO, or use FOLIO data import API which will do the conversion for you, with default mapping.
  Regardless, holdings and items need to be converted locally.

  The local method using marc2inst.pl (located in /folio-import/perl/).  This script requires three arguments:
  1. Mapping_rules path (you can download the default mapper with /folio-import/bash/get_mapping_rules.sh)
  2. Reference directory -- this is the directory were reference json files are located (use reference_inventory.sh)
  3. Path to MARC file -- This would be the utf8 binary file created by the above steps.

  Ex: $ ./marc2inst.pl ../mapping_rules/sim.json ../data/SIMREF/ ../../SIM/Bibs/SimConv.mrc

  This script will run for a while and echo record pos and title to the terminal.  This script will die
  if certain reference mappings are not found.

  Example output:

      ...
      Processing #160280 Looking for Lorraine : the radiant and radical life of Lorra
      Processing #160281 Medicalizing blackness : making racial differences in the At
      Processing #160282 Essentials of health behavior : social and behavioral theory

      Done! 160282 instance records saved to ../../SIM/SimConv_instances.json

  Now it is time to validate the newly created instances.  The validation script is located in the /folio-import/util/
  directory.

    Ex: $ node validateInstance.js ../../SIM/SimConv_instances.json
    
    Output:
    {
      '.alternativeTitles -- uniqueItems': 2,
      '.classifications[3] -- required': 1,
      '.electronicAccess[0] -- required': 1
    }

    NOTE: Either fix the errored records or remove them from the collection-- these items will cause batch loads to fail.

2. Create holdings and items

  Holdings and items are created by the same script, items_sim.pl (located in the perl directory)

  The required argument is the MARC binary file used to create instances

  Ex: $ ./items_sim.pl ../../SIM/SimConv.mrc

  But first, we need to create an hrid to instance id map.  Use hrid2uuidMap.js in the util directory which requires 
  an instances.json file as input (eg. $ node hrid2uuidMap.js ../../SIM/SimConv_instances.json).  This script will 
  create the needed inst2holdingsMap.json file in the same directory as the MARC binary file.

  Now run ./items_sim.pl ../../SIM/SimConv.mrc

  Output ex:
    ...
    # 160279 [b2273453]
    # 160280 [b2273454]
    # 160281 [b2273457]
    # 160282 [b2273458]

    Holdings: 161503
    Items:    178745

  This script will create both holdings and items files with the same prefix as the incoming MARC file
  (eg. SimConv_holdings.json and SimConv_items.json)

  NOTE: items_sim.pl will expect to find reference data in ../data/SIMREF/.  If they are located in a different directory,
  then update line 16.  This directory should also contain tsv files from the mapping spreadsheet located at 
  https://docs.google.com/spreadsheets/d/10MQb_mhbC0cBEvQ5FeJqGA9O7wDRP-sjHmHAg7io7RI/edit#gid=0. The script is looking for 
  locations.tsv and itypes.tsv.

  NOTE: items_sim.pl will also expect to find a call number file as sim_callno.txt.  This file maps the "b" number to call num.

3. Load json files into FOLIO

  Use your favorite nodejs loader from the root directory of this project.  I recommend:
  
  loadInvetoryBatchStream.js -r instances SimConv_instances.json
  loadInvetoryBatchStream.js -r holdingsRecords SimConv_holdings.json
  loadInvetoryBatchStream.js -r items SimConv_items.json






  
    



